# -*- coding: utf-8 -*-
"""Speech-to-speech.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z5sE-AMedLZ0XAZ9JgD1M4PDDoPLZaRS
"""

!pip install datasets

!pip install -U datasets

from huggingface_hub import notebook_login

notebook_login()

import torch
from transformers import pipeline
from datasets import load_dataset
from transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan
from transformers import pipeline

device = "cuda:0" if torch.cuda.is_available() else "cpu"
device

pipe = pipeline("automatic-speech-recognition", model="openai/whisper-base", device=device)

dataset = load_dataset("facebook/voxpopuli", "it", split="validation", streaming=True)
sample = next(iter(dataset))

from IPython import display
display.Audio(sample["audio"]["array"], rate=sample["audio"]["sampling_rate"])

def transcribe(audio):
  return pipe(audio,generate_kwargs={"task": "translate"})["text"]

text = transcribe(sample["audio"].copy())

text

sample["raw_text"]

processor = SpeechT5Processor.from_pretrained("microsoft/speecht5_tts")

model = SpeechT5ForTextToSpeech.from_pretrained("microsoft/speecht5_tts")
vocoder = SpeechT5HifiGan.from_pretrained("microsoft/speecht5_hifigan")

model.to(device)
vocoder.to(device)

embeddings_dataset = load_dataset("Matthijs/cmu-arctic-xvectors", split="validation")

embeddings_dataset

speaker_embeddings = torch.tensor(embeddings_dataset[730]['xvector']).unsqueeze(0)

def synthesise(text):
    inputs = processor(text=text, return_tensors="pt")
    speech = model.generate_speech(
        inputs["input_ids"].to(device), speaker_embeddings.to(device), vocoder=vocoder
    )
    return speech.cpu()

display.Audio(synthesise(text),rate=16000)

import numpy as np

import numpy
targt_type = np.int16
max_range =np.iinfo(targt_type).max

def speech_to_speech_translation(audio):
    translated_text = transcribe(audio)
    synthesised_speech = synthesise(translated_text)
    synthesised_speech = (synthesised_speech.numpy() * max_range).astype(np.int16)
    return 16000, synthesised_speech

sampling_rate, synthesised_speech = speech_to_speech_translation(sample["audio"])

pip install gradio







